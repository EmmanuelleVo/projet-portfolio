// Public fonts directory
$ws_fonts-path: "../../fonts/";

// Available fonts declaration. Map format :
// $ws_fonts-stack: (
//      group: (
//          variant: (
//              family: "font-family-name",
//              stack: (Helvetica, Arial, sans-serif),
//              weight: normal,
//              style: normal,
//              file: "mt-font-file", // optional, will take group-variant by default
//              formats: (woff2, woff), // optional, will take (eot woff2 woff ttf svg) by default
//              bust: false // optional, will add a random string in the font's URL query parameters for cache busting
//          ),
//          ...
//      ),
//      ...
// );
$ws_fonts-stack: (
        icons: (
                font: (
                        family: 'iconfont',
                        weight: normal,
                        file: 'iconfont',
                        style: normal,
                        bust: true
                )
        )
);




$ws_used-fonts: ();

// - @include track-fonts($group, $variant)
// **********************************************************
// Adds font to used-fonts map in order to include them as
// font-face inclusions
// **********************************************************
@mixin track-fonts($group, $variant) {
  @if map-has-key($ws_used-fonts, $group) == false {
    $ws_used-fonts: map-merge($ws_used-fonts, ($group: ())) !global;
  }
  $font-map: map-get($ws_used-fonts, $group);
  @if index($font-map, $variant) == null {
    $variations: append($font-map, $variant);
    $ws_used-fonts: map-merge($ws_used-fonts, ($group: $variations)) !global;
  }
}

// - map-deep-get($map, $keys...)
// **********************************************************
// Returns value of a nested map structure
// **********************************************************
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    @if type-of($map) != "map" {
      @warn '`#{$map}` is not a map.';
      @return false;
    }
    $map: map-get($map, $key);
  }
  @return $map;
}

// - @include font-face($family, $path, $weight, $style, $extensions, $bust)
// **********************************************************
// Creates an @font-face declaration with given properties
// Inspired by
// https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
// **********************************************************
@mixin font-face($name, $path, $weight: null, $style: null, $extensions: eot woff2 woff ttf svg, $bust: false) {
  $src: null;
  $extmods: (
          eot: "?",
          svg: "#" + str-replace($name, " ", "_")
  );
  $formats: (
          otf: "opentype",
          ttf: "truetype"
  );
  $buster: if($bust, str-slice("" + random(), 3), "");

  @each $ext in $extensions {
    $extmod: if(map-has-key($extmods, $ext), map-get($extmods, $ext), "");
    @if str-slice($extmod, 0, 1) == "?" and $bust { $extmod: if($extmod == "?", "", "&" + str-slice($extmod, 2)); }
    @if $bust { $extmod: "?" + $buster + $extmod; }
    $extmod: $ext + $extmod;
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

// - @include import-fonts($font-stack)
// **********************************************************
// Creates @font-face declarations for all used and defined
// fonts in current porject state
// **********************************************************
@mixin import-fonts($font-stack: $ws_fonts-stack) {
  @each $group, $variations in $ws_used-fonts {
    @each $variant in $variations {
      $font-properties: map-deep-get($font-stack, $group, $variant);
      @if $font-properties {
        $font-file: if(map-has-key($font-properties, file), map-get($font-properties, file), "#{$group}-#{$variant}");
        $font-path: "#{$ws_fonts-path}#{$font-file}";
        $font-family: map-get($font-properties, family);
        $font-formats: map-get($font-properties, formats);
        $font-weight: map-get($font-properties, weight);
        $font-style: map-get($font-properties, style);
        $font-bust: if(map-has-key($font-properties, bust), map-get($font-properties, bust), false);
        @if $font-formats {
          @include font-face($font-family, $font-path, $font-weight, $font-style, $font-formats, $font-bust);
        } @else {
          @include font-face($font-family, $font-path, $font-weight, $font-style);
        }
      }
    }
  }
}

// - @include font($name, $variant, $properties, $font-stack)
// **********************************************************
// Creates the necessary font-* declarations for using the
// font at the desired place.
// **********************************************************
@mixin font($name, $variant: regular, $properties: family weight style, $font-stack: $ws_fonts-stack){
  $font-properties: map-deep-get($font-stack, $name, $variant);
  @if $font-properties {
    @include track-fonts($name, $variant);
    @each $property in $properties {
      $value: map-get($font-properties, $property);
      @if $property == family {
        $stack: map-get($font-properties, stack);
        $stack: if(type-of($stack) == string, ($value, $stack), join($value, $stack));
        @if $stack {
          $value: $stack;
        }
      }
      font-#{$property}: $value;
    }
  }
}